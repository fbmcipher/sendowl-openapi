<?php
/**
 * Bundle
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendOwl API
 *
 * The SendOwl API allows third party applications to access and update data associated with customer accounts.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Bundle Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Bundle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Bundle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'category' => 'string',
        'subcategory' => 'string',
        'price' => 'float',
        'custom_field' => 'string',
        'components' => 'int[]',
        'shopify_variant_id' => 'int',
        'override_currency_code' => 'string',
        'currency_code' => 'string',
        'product_image_url' => 'string',
        'instant_buy_url' => 'string',
        'add_to_cart_url' => 'string',
        'sales_page_url' => 'string',
        'price_is_minimum' => 'bool',
        'limit_to_single_qty_in_cart' => 'bool',
        'affiliate_sellable' => 'bool',
        'commission_rate' => 'float',
        'access_all_products' => 'bool',
        'access_after_order_creation' => 'bool',
        'access_after_order_creation_includes_previous' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'category' => null,
        'subcategory' => null,
        'price' => 'float',
        'custom_field' => null,
        'components' => null,
        'shopify_variant_id' => null,
        'override_currency_code' => null,
        'currency_code' => null,
        'product_image_url' => null,
        'instant_buy_url' => null,
        'add_to_cart_url' => null,
        'sales_page_url' => null,
        'price_is_minimum' => null,
        'limit_to_single_qty_in_cart' => null,
        'affiliate_sellable' => null,
        'commission_rate' => 'float',
        'access_all_products' => null,
        'access_after_order_creation' => null,
        'access_after_order_creation_includes_previous' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'category' => 'category',
        'subcategory' => 'subcategory',
        'price' => 'price',
        'custom_field' => 'custom_field',
        'components' => 'components',
        'shopify_variant_id' => 'shopify_variant_id',
        'override_currency_code' => 'override_currency_code',
        'currency_code' => 'currency_code',
        'product_image_url' => 'product_image_url',
        'instant_buy_url' => 'instant_buy_url',
        'add_to_cart_url' => 'add_to_cart_url',
        'sales_page_url' => 'sales_page_url',
        'price_is_minimum' => 'price_is_minimum',
        'limit_to_single_qty_in_cart' => 'limit_to_single_qty_in_cart',
        'affiliate_sellable' => 'affiliate_sellable',
        'commission_rate' => 'commission_rate',
        'access_all_products' => 'access_all_products',
        'access_after_order_creation' => 'access_after_order_creation',
        'access_after_order_creation_includes_previous' => 'access_after_order_creation_includes_previous',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'category' => 'setCategory',
        'subcategory' => 'setSubcategory',
        'price' => 'setPrice',
        'custom_field' => 'setCustomField',
        'components' => 'setComponents',
        'shopify_variant_id' => 'setShopifyVariantId',
        'override_currency_code' => 'setOverrideCurrencyCode',
        'currency_code' => 'setCurrencyCode',
        'product_image_url' => 'setProductImageUrl',
        'instant_buy_url' => 'setInstantBuyUrl',
        'add_to_cart_url' => 'setAddToCartUrl',
        'sales_page_url' => 'setSalesPageUrl',
        'price_is_minimum' => 'setPriceIsMinimum',
        'limit_to_single_qty_in_cart' => 'setLimitToSingleQtyInCart',
        'affiliate_sellable' => 'setAffiliateSellable',
        'commission_rate' => 'setCommissionRate',
        'access_all_products' => 'setAccessAllProducts',
        'access_after_order_creation' => 'setAccessAfterOrderCreation',
        'access_after_order_creation_includes_previous' => 'setAccessAfterOrderCreationIncludesPrevious',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'category' => 'getCategory',
        'subcategory' => 'getSubcategory',
        'price' => 'getPrice',
        'custom_field' => 'getCustomField',
        'components' => 'getComponents',
        'shopify_variant_id' => 'getShopifyVariantId',
        'override_currency_code' => 'getOverrideCurrencyCode',
        'currency_code' => 'getCurrencyCode',
        'product_image_url' => 'getProductImageUrl',
        'instant_buy_url' => 'getInstantBuyUrl',
        'add_to_cart_url' => 'getAddToCartUrl',
        'sales_page_url' => 'getSalesPageUrl',
        'price_is_minimum' => 'getPriceIsMinimum',
        'limit_to_single_qty_in_cart' => 'getLimitToSingleQtyInCart',
        'affiliate_sellable' => 'getAffiliateSellable',
        'commission_rate' => 'getCommissionRate',
        'access_all_products' => 'getAccessAllProducts',
        'access_after_order_creation' => 'getAccessAfterOrderCreation',
        'access_after_order_creation_includes_previous' => 'getAccessAfterOrderCreationIncludesPrevious',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['subcategory'] = isset($data['subcategory']) ? $data['subcategory'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['custom_field'] = isset($data['custom_field']) ? $data['custom_field'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
        $this->container['shopify_variant_id'] = isset($data['shopify_variant_id']) ? $data['shopify_variant_id'] : null;
        $this->container['override_currency_code'] = isset($data['override_currency_code']) ? $data['override_currency_code'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['product_image_url'] = isset($data['product_image_url']) ? $data['product_image_url'] : null;
        $this->container['instant_buy_url'] = isset($data['instant_buy_url']) ? $data['instant_buy_url'] : null;
        $this->container['add_to_cart_url'] = isset($data['add_to_cart_url']) ? $data['add_to_cart_url'] : null;
        $this->container['sales_page_url'] = isset($data['sales_page_url']) ? $data['sales_page_url'] : null;
        $this->container['price_is_minimum'] = isset($data['price_is_minimum']) ? $data['price_is_minimum'] : null;
        $this->container['limit_to_single_qty_in_cart'] = isset($data['limit_to_single_qty_in_cart']) ? $data['limit_to_single_qty_in_cart'] : null;
        $this->container['affiliate_sellable'] = isset($data['affiliate_sellable']) ? $data['affiliate_sellable'] : null;
        $this->container['commission_rate'] = isset($data['commission_rate']) ? $data['commission_rate'] : null;
        $this->container['access_all_products'] = isset($data['access_all_products']) ? $data['access_all_products'] : null;
        $this->container['access_after_order_creation'] = isset($data['access_after_order_creation']) ? $data['access_after_order_creation'] : null;
        $this->container['access_after_order_creation_includes_previous'] = isset($data['access_after_order_creation_includes_previous']) ? $data['access_after_order_creation_includes_previous'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return string
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param string $subcategory subcategory
     *
     * @return $this
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets custom_field
     *
     * @return string
     */
    public function getCustomField()
    {
        return $this->container['custom_field'];
    }

    /**
     * Sets custom_field
     *
     * @param string $custom_field custom_field
     *
     * @return $this
     */
    public function setCustomField($custom_field)
    {
        $this->container['custom_field'] = $custom_field;

        return $this;
    }

    /**
     * Gets components
     *
     * @return int[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param int[] $components components
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets shopify_variant_id
     *
     * @return int
     */
    public function getShopifyVariantId()
    {
        return $this->container['shopify_variant_id'];
    }

    /**
     * Sets shopify_variant_id
     *
     * @param int $shopify_variant_id shopify_variant_id
     *
     * @return $this
     */
    public function setShopifyVariantId($shopify_variant_id)
    {
        $this->container['shopify_variant_id'] = $shopify_variant_id;

        return $this;
    }

    /**
     * Gets override_currency_code
     *
     * @return string
     */
    public function getOverrideCurrencyCode()
    {
        return $this->container['override_currency_code'];
    }

    /**
     * Sets override_currency_code
     *
     * @param string $override_currency_code override_currency_code
     *
     * @return $this
     */
    public function setOverrideCurrencyCode($override_currency_code)
    {
        $this->container['override_currency_code'] = $override_currency_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets product_image_url
     *
     * @return string
     */
    public function getProductImageUrl()
    {
        return $this->container['product_image_url'];
    }

    /**
     * Sets product_image_url
     *
     * @param string $product_image_url product_image_url
     *
     * @return $this
     */
    public function setProductImageUrl($product_image_url)
    {
        $this->container['product_image_url'] = $product_image_url;

        return $this;
    }

    /**
     * Gets instant_buy_url
     *
     * @return string
     */
    public function getInstantBuyUrl()
    {
        return $this->container['instant_buy_url'];
    }

    /**
     * Sets instant_buy_url
     *
     * @param string $instant_buy_url instant_buy_url
     *
     * @return $this
     */
    public function setInstantBuyUrl($instant_buy_url)
    {
        $this->container['instant_buy_url'] = $instant_buy_url;

        return $this;
    }

    /**
     * Gets add_to_cart_url
     *
     * @return string
     */
    public function getAddToCartUrl()
    {
        return $this->container['add_to_cart_url'];
    }

    /**
     * Sets add_to_cart_url
     *
     * @param string $add_to_cart_url add_to_cart_url
     *
     * @return $this
     */
    public function setAddToCartUrl($add_to_cart_url)
    {
        $this->container['add_to_cart_url'] = $add_to_cart_url;

        return $this;
    }

    /**
     * Gets sales_page_url
     *
     * @return string
     */
    public function getSalesPageUrl()
    {
        return $this->container['sales_page_url'];
    }

    /**
     * Sets sales_page_url
     *
     * @param string $sales_page_url sales_page_url
     *
     * @return $this
     */
    public function setSalesPageUrl($sales_page_url)
    {
        $this->container['sales_page_url'] = $sales_page_url;

        return $this;
    }

    /**
     * Gets price_is_minimum
     *
     * @return bool
     */
    public function getPriceIsMinimum()
    {
        return $this->container['price_is_minimum'];
    }

    /**
     * Sets price_is_minimum
     *
     * @param bool $price_is_minimum price_is_minimum
     *
     * @return $this
     */
    public function setPriceIsMinimum($price_is_minimum)
    {
        $this->container['price_is_minimum'] = $price_is_minimum;

        return $this;
    }

    /**
     * Gets limit_to_single_qty_in_cart
     *
     * @return bool
     */
    public function getLimitToSingleQtyInCart()
    {
        return $this->container['limit_to_single_qty_in_cart'];
    }

    /**
     * Sets limit_to_single_qty_in_cart
     *
     * @param bool $limit_to_single_qty_in_cart limit_to_single_qty_in_cart
     *
     * @return $this
     */
    public function setLimitToSingleQtyInCart($limit_to_single_qty_in_cart)
    {
        $this->container['limit_to_single_qty_in_cart'] = $limit_to_single_qty_in_cart;

        return $this;
    }

    /**
     * Gets affiliate_sellable
     *
     * @return bool
     */
    public function getAffiliateSellable()
    {
        return $this->container['affiliate_sellable'];
    }

    /**
     * Sets affiliate_sellable
     *
     * @param bool $affiliate_sellable affiliate_sellable
     *
     * @return $this
     */
    public function setAffiliateSellable($affiliate_sellable)
    {
        $this->container['affiliate_sellable'] = $affiliate_sellable;

        return $this;
    }

    /**
     * Gets commission_rate
     *
     * @return float
     */
    public function getCommissionRate()
    {
        return $this->container['commission_rate'];
    }

    /**
     * Sets commission_rate
     *
     * @param float $commission_rate commission_rate
     *
     * @return $this
     */
    public function setCommissionRate($commission_rate)
    {
        $this->container['commission_rate'] = $commission_rate;

        return $this;
    }

    /**
     * Gets access_all_products
     *
     * @return bool
     */
    public function getAccessAllProducts()
    {
        return $this->container['access_all_products'];
    }

    /**
     * Sets access_all_products
     *
     * @param bool $access_all_products access_all_products
     *
     * @return $this
     */
    public function setAccessAllProducts($access_all_products)
    {
        $this->container['access_all_products'] = $access_all_products;

        return $this;
    }

    /**
     * Gets access_after_order_creation
     *
     * @return bool
     */
    public function getAccessAfterOrderCreation()
    {
        return $this->container['access_after_order_creation'];
    }

    /**
     * Sets access_after_order_creation
     *
     * @param bool $access_after_order_creation access_after_order_creation
     *
     * @return $this
     */
    public function setAccessAfterOrderCreation($access_after_order_creation)
    {
        $this->container['access_after_order_creation'] = $access_after_order_creation;

        return $this;
    }

    /**
     * Gets access_after_order_creation_includes_previous
     *
     * @return bool
     */
    public function getAccessAfterOrderCreationIncludesPrevious()
    {
        return $this->container['access_after_order_creation_includes_previous'];
    }

    /**
     * Sets access_after_order_creation_includes_previous
     *
     * @param bool $access_after_order_creation_includes_previous access_after_order_creation_includes_previous
     *
     * @return $this
     */
    public function setAccessAfterOrderCreationIncludesPrevious($access_after_order_creation_includes_previous)
    {
        $this->container['access_after_order_creation_includes_previous'] = $access_after_order_creation_includes_previous;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
